<?php

/**
 * @file
 * Contains install and update functions.
 *
 * Created by: Topsitemakers
 * http://www.topsitemakers.com/
 */

/**
 * Implements hook_requirements().
 */
function boilerplate_requirements($phase) {
  $requirements = array();

  switch ($phase) {
    // Called while the module is installed.
    case 'install':
      break;

    // Called while the update.php is being executed.
    case 'update':
      break;

    // Called during regular use of the website.
    case 'runtime':
      // Let's check if the name of this module is still "boilerplate".
      // If it is, that means that it was not customized and the developers
      // should consider renaming it.
      $module_name = basename(__FILE__, '.install');
      // A little trick that will prevent the string from being replaced. We'll
      // compare the module name to the base64 encoding of "boilerplate". If we
      // don't do this, the error will always be displayed because the string we
      // will be checking this against will be the current name of the module.
      if ($module_name == base64_decode('Ym9pbGVycGxhdGU=')) {
        $requirements[] = array(
          'title' => t('Dev module name'),
          'value' => $module_name,
          'description' => t('Module name was not changed. Consider renaming the module. This is coming from the hook_requirements() implementation in %module file.', array(
            '%module' => drupal_get_path('module', $module_name) . '/' . $module_name . '.module',
          )),
          'severity' => REQUIREMENT_WARNING,
        );
      }
      else {
        $requirements[] = array(
          'title' => t('Dev module name'),
          'value' => $module_name,
          'description' => t('You have changed the name of custom module. Everything is OK. This is coming from the hook_requirements() implementation in %module file.', array(
            '%module' => drupal_get_path('module', $module_name) . '/' . $module_name . '.module',
          )),
          'severity' => REQUIREMENT_OK,
        );
      }
      break;
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function boilerplate_schema() {
  $schema['boilerplate'] = array(
    'description' => 'Table description.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary key.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Sample varchar field.',
        'translatable' => TRUE,
      ),
      'body' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Sample text field.',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Sample integer field.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'category' => array('title'),
    ),
    'indexes' => array(
      'list' => array('weight', 'title'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function boilerplate_install() {
  /**
   * Add our custom date format.
   */
  module_load_include('inc', 'boilerplate', 'boilerplate.date-formats');
  // Check if this is already added to the database or if a similar format
  // exists.
  $exists = db_select('date_formats', 'f')
    ->fields('f', array('dfid'))
    ->condition('format', BOILERPLATE_DATE_FORMAT_SAMPLE)
    ->execute()
    ->fetchCol();
  if (!$exists) {
    // Insert custom date format.
    db_insert('date_formats')
      ->fields(array(
        'type' => 'custom',
        'format' => BOILERPLATE_DATE_FORMAT_SAMPLE,
        'locked' => 0,
      ))
      ->execute();
    // Insert a new record to the type table.
    db_insert('date_format_type')
      ->fields(array(
        'type' => BOILERPLATE_DATE_TYPE_SAMPLE,
        'title' => t(BOILERPLATE_DATE_LABEL_SAMPLE),
        'locked' => 0,
      ))
      ->execute();
    // Connect the two.
    variable_set('date_format_' . BOILERPLATE_DATE_FORMAT_SAMPLE, BOILERPLATE_DATE_FORMAT_SAMPLE);
  }
  else {
    watchdog('boilerplate_date_formats', 'Another date format with the same name already exists in the system.', array(), WATCHDOG_NOTICE);
  }

  /*
  // Update the system weight and place it after a certain module.
  $weight = db_select('system', 's')
  ->fields('s', array('weight'))
  ->condition('name', 'node')
  ->execute()
  ->fetchField();

  db_update('system')
  ->fields(array('weight' => $weight + 1))
  ->condition('name', 'boilerplate')
  ->execute();
   */

}

/**
 * Implements hook_uninstall().
 */
function boilerplate_uninstall() {
  // Remove all our variables at once.
  db_query("DELETE FROM {variable} WHERE name LIKE :variables", array(':variables' => 'boilerplate_%'));
  // Remove our date format from the system.
  module_load_include('inc', 'boilerplate', 'boilerplate.date-formats');
  db_delete('date_formats')
    ->condition('format', FFF_MAIN_FORUM_TOPIC_DATE_FORMAT)
    ->execute();
  db_delete('date_format_type')
    ->condition('title', t(FFF_MAIN_FORUM_TOPIC_DATE_LABEL))
    ->execute();
  variable_del('date_format_' . BOILERPLATE_DATE_FORMAT_SAMPLE);
}
