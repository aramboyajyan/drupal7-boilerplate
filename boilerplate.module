<?php

/**
 * @file
 * Custom drupal boilerplate module.
 *
 * Created by: Topsitemakers
 * http://www.topsitemakers.com/
 */

/**
 * Constant variables.
 */
// Disable all emails sent by the website. Use only during the development.
define('BOILERPLATE_DISABLE_EMAILS', TRUE);
// "Development" environment. Use only to provide additional debugging or
// developer information (e.g. hidden fields, dpm() output, etc.).
define('BOILERPLATE_ENV_DEV', TRUE);

/**
 * Preload certain files whose functions we need at all times.
 */
require_once dirname(__FILE__) . '/boilerplate.ajax-commands.inc';
require_once dirname(__FILE__) . '/boilerplate.helpers.inc';
require_once dirname(__FILE__) . '/boilerplate.mailsystem.inc';

/**
 * Implements hook_help().
 */
function boilerplate_help($path, $arg) {
  switch ($path) {

    // This is displayed in the main admin help page.
    case 'admin/help#boilerplate':
      $output  = '<h2>' . t('Sample help page') . '</h2>';
      $output .= '<p>' . t('This page should contain instructions about the module usage and configuration options.') . '</p>';
      $output .= '<p>' . t('If the module integrates with other modules, they should be listed here together with some basic explanation on how to do so.') . '</p>';
      $output .= '<p>' . t('<a href="@link">On this page</a> you can see custom help added to a system path.', array('@link' => url('admin/structure/types'))) . '</p>';
      // Leave an empty paragraph to space out the permissions box.
      $output .= '<p>&nbsp;</p>';
      return $output;

    // This is displayed on a custom path (content types).
    case 'admin/structure/types':
      $output  = '<h2>' . t('Sample help - view content types') . '</h2>';
      $output .= '<p>' . t('On this page you can see available content types and create new ones if necessary.') . '</p>';
      return $output;

  }
}

/**
 * Implements hook_menu().
 */
function boilerplate_menu() {
  $items = array();

  // Add a simple redirection from /login to /user/login. This came as a request
  // quite a few times from editors and other non-technical users for which the
  // /user/login path was somewhat harder to remember. Not all links show the
  // login link, so administrators / editors go to the login page directly via
  // bookmark or just by typing the URL in the addressbar. This redirect will
  // make it easier for them to end up on the login page.
  $items['login'] = array(
    'page callback' => 'drupal_goto',
    'page arguments' => array('user/login'),
    'access callback' => 'user_is_anonymous',
  );

  // Sample menu callbacks.
  $items['boilerplate'] = array(
    'page callback' => 'boilerplate_sample_page_callback',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'boilerplate.pages.inc',
  );
  $items['boilerplate/form'] = array(
    'title' => 'Sample form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boilerplate_sample_form', 'arg1', 'arg2'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'boilerplate.forms.inc',
  );
  $items['boilerplate/arguments/%/%'] = array(
    'page callback' => 'boilerplate_sample_page_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'boilerplate.pages.inc',
  );
  $items['admin/config/boilerplate'] = array(
    'title' => 'Boilerplate settings',
    'page callback' => 'system_admin_menu_block_page',
    'page arguments' => array(),
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'right',
    'weight' => -30,
  );
  $items['admin/config/boilerplate/settings'] = array(
    'title' => 'Sample settings page',
    'description' => 'This is a sample configuration page generated from the Boilerplate module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boilerplate_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'boilerplate.admin.inc',
  );
  $items['admin/config/boilerplate/batch'] = array(
    'title' => 'Sample batch process',
    'description' => 'This is a sample page that will initiate a batch process',
    'page callback' => 'boilerplate_batch_init',
    'access arguments' => array('administer content'),
    'file' => 'boilerplate.batch.inc',
  );
  $items['user/%user/boilerplate'] = array(
    'title' => 'Sample local task',
    'page callback' => 'boilerplate_local_task_user',
    'page arguments' => array(1),
    'access arguments' => array('administer content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'boilerplate.pages.inc',
    'weight' => 100,
  );
  $items['node/%node/boilerplate'] = array(
    'title' => 'Sample local task',
    'page callback' => 'boilerplate_local_task_node',
    'page arguments' => array(1),
    'access arguments' => array('administer content'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'boilerplate.pages.inc',
    'weight' => 100,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function boilerplate_menu_alter(&$items) {
  // Block the access to the /node page.
  $items['node']['access callback'] = FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function boilerplate_admin_paths() {
  return array(
    // Use administrative theme when editing panel nodes.
    'node/*/panel_layout' => TRUE,
    'node/*/panel_content' => TRUE,
    // Use administrative theme when editing, deleting or checking out the dev
    // output of comments. Otherwise, the front-end theme will be used, and that
    // is usually not suited for administration.
    'comment/*/edit' => TRUE,
    'comment/*/delete' => TRUE,
    'comment/*/devel' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function boilerplate_permission() {
  return array(
    'sample permission' => array(
      'title' => t('Sample permission rule'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function boilerplate_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'boilerplate') . '/views',
  );
}

/**
 * Implements hook_cron().
 */
function boilerplate_cron() {

  // In order to avoid situation when the operation is called multiple times,
  // before processing our operations we will make sure that the operation is
  // not already running by acquiring the cron lock.
  // This is important in cases when the cron runs are very frequent, e.g. every
  // minute.
  if (lock_acquire('boilerplate_cron_lock')) {
    watchdog('boilerplate_cron', 'Cron hook executed.');
    // Release the lock, so the next cron run can continue running the process.
    lock_release('boilerplate_cron_lock');
  }

}

/**
 * Implements hook_block_info().
 */
function boilerplate_block_info() {
  $blocks['sample']['info'] = t('Sample block');
  $blocks['sample']['properties']['administrative'] = TRUE;

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function boilerplate_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sample':
      $block['subject'] = NULL;
      $block['content'] = '<p>' . t('Sample block content') . '</p>';
      if (user_access('sample permission')) {
        $block['content'] .= '<p>' . t('This text is visible only to certain roles.') . '</p>';
      }

      return $block;
  }
}

/**
 * Implements hook_block_configure().
 */
function boilerplate_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'sample':
      $form['boilerplate'] = array(
        '#type' => 'fieldset',
        '#title' => t('Custom block settings'),
      );
      $form['boilerplate']['boilerplate_block_count'] = array(
        '#type' => 'select',
        '#title' => t('Sample counting'),
        '#default_value' => variable_get('boilerplate_block_count', 10),
        '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)),
      );

      return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function boilerplate_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'sample':
      variable_set('boilerplate_block_count', $edit['boilerplate_block_count']);
      break;
  }
}

/**
 * Implements hook_entity_insert().
 */
function boilerplate_entity_insert($entity, $type) {
  // Register our shutdown function that will provide post-action hooks for
  // other modules. This functionality is inspired by the hook_post_action
  // module.
  drupal_register_shutdown_function('_boilerplate_post_save', $entity, $type, 'insert');
}

/**
 * Implements hook_entity_update().
 */
function boilerplate_entity_update($entity, $type) {
  drupal_register_shutdown_function('_boilerplate_post_save', $entity, $type, 'update');
}

/**
 * Implements hook_entity_delete().
 */
function boilerplate_entity_delete($entity, $type) {
  drupal_register_shutdown_function('_boilerplate_post_save', $entity, $type, 'delete');
}

/**
 * Implements hook_preprocess_page().
 */
function boilerplate_preprocess_page(&$vars) {

}

/**
 * Implements hook_preprocess_node().
 */
function boilerplate_preprocess_node(&$vars) {

  /**
   * Per content type preprocessing.
   */
  switch ($vars['node']->type) {

    // Pages.
    case 'page':
      break;

  }

}

/**
 * Implements hook_preprocess_field().
 */
function boilerplate_preprocess_field(&$vars) {

  /**
   * Per field preprocessing.
   */
  switch ($vars['element']['#field_name']) {

    // Sample field.
    case 'field_sample_field':
      $vars['items'][0]['#markup'] = t('Overridden value.');
      break;

  }

  /**
   * Per content type preprocessing.
   */
  if ($vars['element']['#entity_type'] == 'node') {
    switch ($vars['element']['#object']->type) {

      // Pages.
      case 'page':
        if ($vars['element']['#field_name'] == 'field_sample_field') {
          $vars['items'][0]['#markup'] = t('Overridden based on content type.');
        }
        break;

    }
  }

}

/**
 * Implements hook_preprocess_block().
 */
function boilerplate_preprocess_block(&$vars) {

}

/**
 * Implements hook_form_alter().
 */
function boilerplate_form_alter(&$form, &$form_state, $form_id) {
  /**
   * Remove unnecessary parameters for forms with GET method.
   */
  if ($form['#method'] == 'get') {
    // Form related information needs to be removed through an after build
    // callback.
    $form['#after_build'][] = 'boilerplate_remove_parameters_on_get_forms';
    // We also need to remove the button names.
    //
    // The code below is just an example that will work with simple forms.
    // Modify it to suit your needs.
    foreach (element_children($form) as $element) {
      if (isset($form[$element]['#type']) && $form[$element]['#type'] == 'submit') {
        $form[$element]['#name'] = '';
      }
    }
  }

  /**
   * Specific overrides.
   */
  switch ($form_id) {

    // Site settings form.
    case 'system_site_information_settings':
      // Hide the number of posts on the front page field if it will never be
      // used.
      $form['front_page']['default_nodes_main']['#access'] = FALSE;
      break;

    // Node type form.
    case 'node_type_form':
      // Automatically check the "Revisioning" checkbox for all new content
      // types.
      if (isset($form['#node_type']->is_new)) {
        $form['workflow']['node_options']['#default_value'][] = 'revision';
      }
      break;

    // Panels edit form.
    case 'panels_edit_display_form':
      // Remove "Live preview".
      $form['preview']['#access'] = FALSE;
      break;

    // Taxonomy term and vocabulary forms.
    case 'taxonomy_form_term':
    case 'taxonomy_form_vocabulary':
      // Remove the body field (description) fields.
      $form['description']['#access'] = FALSE;
      break;

    // Example override for node comment form.
    case 'comment_node_type_form':
      // Remove the "Your name" field; unnecessary if the site is using Ultima.
      unset($form['author']['_author']);
      // Redirect back to the node form if there is a validation error on form
      // submission. This is to avoid having separate page where the comment is
      // displayed right under the node.
      $form['#action'] = url('node/' . $form['#node']->nid);
      break;

    // Sample webform custom validation.
    case 'webform_client_form_1':
      $form['#validate'][] = '_boilerplate_validate_webform';
      $first = array_shift($form['#submit']);
      array_unshift($form['#submit'], $first, '_boilerplate_validate_webform');
      break;

    // User login form.
    case 'user_login':
      // Remove default descriptions.
      unset($form['name']['#description']);
      unset($form['pass']['#description']);
      break;

    // User login form.
    case 'user_register_form':
      break;

    // Reset password form.
    case 'user_pass':
      break;

    // User edit page.
    case 'user_profile_form':
      break;

  }

}

/**
 * Implements hook_theme().
 */
function boilerplate_theme($existing, $type, $theme, $path) {
  // Get the path to this module and define theme dir.
  $module_path = drupal_get_path('module', 'boilerplate');
  $theme_dir   = $module_path . '/theme';

  // Themable elements.
  return array(
    'sample-template' => array(
      'template' => 'sample-template',
      'variables' => array('content' => NULL),
      'path' => $theme_dir,
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function boilerplate_page_alter(&$page) {
  global $language;

  // Add our custom CSS only on admin paths.
  //
  // Ideally, each website will have a child theme that is based on the contrib
  // admin theme used on the site, but this might be an overkill in cases when
  // only minor modifications are needed.
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', 'boilerplate') . '/css/admin.modifications.css');
  }

  // Add custom setting accessible in JS through Drupal.settings.boilerplate.var.
  // Language added below is accessible the following way:
  //      Drupal.settings.boilerplate.language.
  drupal_add_js(array(
    'boilerplate' => array(
      'sampleVar' => t('Custom value'),
      'language' => $language->language,
    ),
  ),
    array('type' => 'setting')
  );

  // Add content to the end of the page.
  $page['page_bottom']['boilerplate'] = array(
    '#type' => 'markup',
    '#markup' => '<!-- This content will be added to the end of the page. -->',
  );

}

/**
 * Implements hook_mail().
 */
function boilerplate_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array(
    '!site-name' => variable_get('site_name', 'Drupal'),
    '!subject'   => $params['subject'],
  );
  switch ($key) {
    case 'sample_text_mail':
      $message['subject'] .= t('!subject', $variables, array('langcode' => $language->language));
      $message['body'][] = t('Just a sample email sent from !site-name to demonstrate the hook_mail() function.', $variables, array('langcode' => $language->language));
      $message['body'][] = $params['message'];
      break;

    case 'sample_html_mail':
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] .= t('!subject', $variables, array('langcode' => $language->language));
      $message['body'][] = t('Just a sample <b>HTML</b> <i>email</i> sent from !site-name to demonstrate the hook_mail() function.', $variables, array('langcode' => $language->language));
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_username_alter().
 */
function boilerplate_username_alter(&$name, $account) {
  // Before using this hook, it is important to understand what does this
  // implementation do, and how does it affect other parts of the site.
  //
  // Most obvious benefit of altering the way names of users are displayed on
  // the site is to include custom fields, or profile information (e.g. if you
  // are using the Profile2 module).
  //
  // However, changing the usernames here will affect the tokens as well. This
  // means that registration emails for example will not include the real
  // username of the user, but will instead display {first name} {last name}, or
  // whatever else you set it to.
  //
  // This is not intuitive and is not clearly documented. What I suggest to
  // remedy this, is to create another token for displaying the real username.
  // The only downside of this, is that you will have to manually update all
  // places where you want usernames to be displayed instead of formatted names.
  //
  // Finally, the implementation below is just as an example.
  if (
    isset($account->field_first_name[LANGUAGE_NONE][0]['value']) &&
    isset($account->field_last_name[LANGUAGE_NONE][0]['value'])
  ) {
    $name = t('@first_name @last_name', array(
      '@first_name' => $account->field_first_name[LANGUAGE_NONE][0]['value'],
      '@last_name'  => $account->field_last_name[LANGUAGE_NONE][0]['value'],
    ));
  }
}

/**
 * Implements of hook_user_view().
 *
 * Adds a custom element to the user view page.
 */
function boilerplate_user_view($account, $view_mode, $langcode) {
  $account->content['boilerplate'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Boilerplate'),
    '#markup' => t('Your account ID is: @id', array('@id' => $account->uid)),
  );
}

/**
 * Implements hook_webform_select_options_info().
 *
 * Defines a custom dropdown form element to be used with the Webform module.
 */
function boilerplate_webform_select_options_info() {
  $items['nodes'] = array(
    'title' => t('List of published nodes'),
    'options callback' => '_boilerplate_get_all_nodes',
  );

  return $items;
}

/**
 * Implements hook_skinr_api_VERSION().
 */
function boilerplate_skinr_api_2() {
  return array(
    'directory' => 'skins',
  );
}

/**
 * Implements hook_mail_alter.
 */
function boilerplate_mail_alter(&$message) {
  if (BOILERPLATE_DISABLE_EMAILS) {
    // Set 'To' field to nothing, so Drupal won't have any address.
    $message['to'] = '';
  }
}

/**
 * Sample function - send an email.
 */
function boilerplate_sample_send_email() {
  global $user;

  // Send email only if the user is logged in and allow to do this only once in
  // 1 hour as an anti-flood mechanism.
  if ($user->uid && flood_is_allowed('boilerplate_sample_send_email', 1)) {
    $account = user_load($user->uid);
    $values['sender']  = $account;
    $values['subject'] = 'Sample email subject';
    $values['message'] = 'Sample email body';
    $values['name']    = $account->name;

    // Send the default, text-only email.
    drupal_mail('boilerplate', 'sample_text_mail', 'email@to.com', language_default(), $values, 'email@from.com');

    // Send the rich, HTML email. Note: we have to switch to the HTML Mail System
    // and then back to the default one.
    variable_set('mail_system', array('default-system' => 'HTMLMailSystem'));
    drupal_mail('boilerplate', 'sample_html_mail', 'email@to.com', language_default(), $values, 'email@from.com');
    variable_set('mail_system', array('default-system' => 'DefaultMailSystem'));

    // Register a flood event, which will prevent mindless submissions. Second
    // parameter defines the window.
    flood_register_event('boilerplate_sample_send_email', 60 * 60);

    // Invoke our custom event.
    rules_invoke_event('boilerplate_rules_event_email_is_sent', $account);

    // Register this event in the log.
    watchdog('mail', '%sender-name (@sender-from) sent an e-mail.', array(
      '%sender-name' => $values['name'],
      '@sender-from' => $account->mail,
    ));
  }
}

/**
 * Sample function - caching usage.
 */
function boilerplate_sample_cached_data($reset = FALSE) {

  // Save data in a static variable for consecutive calls.
  static $data;

  // If data is not set or reset is requested, regenerate.
  if (!isset($data) || $reset) {
    if (!$reset && ($cache = cache_get('boilerplate_sample_data')) && !empty($cache->data)) {
      $data = unserialize($cache->data);
    }
    else {
      // Regenerate the data. Place here any custom functions or queries to
      // perform resource intensive tasks.
      $data = array(1, 2, 3);
      // Save the data in cache; if it's an array serialize it
      // Last parameter is expiration; CACHE_PERMANENT, CACHE_TEMPORARY or
      // timestamp. In the case below, cache is set to 1 full day.
      cache_set('boilerplate_sample_data', serialize($data), 'cache', REQUEST_TIME + 1 * 24 * 60 * 60);
    }
  }

  return $data;
}

/**
 * Sample function - custom validation function for webform component.
 */
function _boilerplate_validate_webform($form) {
  foreach ($form['#node']->webform['components'] as $element_id => $element) {
    if ($element['form_key'] == 'sample_field') {
      if ($element['value'] != 'Sample value') {
        form_set_error('', t('Validation message.'));
      }
    }
  }
}

/**
 * Post save action callback.
 *
 * @see boilerplate_entity_insert()
 * @see boilerplate_entity_update()
 * @see boilerplate_entity_delete()
 */
function _boilerplate_post_save($entity, $type, $op) {
  $entity_is_saved = FALSE;
  $new_entity = NULL;

  if ($op == 'insert' || $op == 'update') {
    $entity_is_saved = TRUE;
  }
  if ($op == 'delete') {
    list($id) = entity_extract_ids($type, $entity);
    $new_entity = entity_load($type, array($id));
    if (!$new_entity) {
      $entity_is_saved = TRUE;
    }
  }
  if ($entity_is_saved) {
    module_invoke_all('entity_post' . $op, $entity, $type);
    module_invoke_all('entity_postsave', $entity, $type, $op);

    if ($type == 'node') {
      module_invoke_all('node_post' . $op, $entity);
      module_invoke_all('node_postsave', $entity, $op);
    }
  }
}

/**
 * Remove unnecessary parameters from GET forms.
 */
function boilerplate_remove_parameters_on_get_forms($form) {
  unset($form['form_token']);
  unset($form['form_build_id']);
  unset($form['form_id']);

  return $form;
}

/**
 * Access callback for the boilerplate_views_plugin_access_even_uids access
 * plugin.
 *
 * Checks if current user ID is even.
 */
function kin_corridors_views_plugin_access_even_uids_callback($account = NULL) {
  return TRUE;
  if (empty($account)) {
    global $user;
    $account = user_load($user->uid);
  }

  return (
    // Skip anonymous users.
    $account->uid &&
    (
      // Skip the superuser.
      $account->uid == 1 ||
      // Users with even IDs.
      $account->uid % 2 == 0
    )
  );
}
